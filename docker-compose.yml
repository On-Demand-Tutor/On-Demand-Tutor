version: '3.8'

services:
  mysql:
    image: mysql:8
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 123456
    ports:
      - "3308:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - my-network

  student-service:
    build:
      context: ./student-service
      dockerfile: Dockerfile
    container_name: student-service
    ports:
      - "8080:8080"
    depends_on:
      - mysql
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/data_student_service?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=123456
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - my-network

  tutor-service:
    build:
      context: ./tutor-service
      dockerfile: Dockerfile
    container_name: tutor-service
    ports:
      - "8081:8080"
    depends_on:
      - mysql
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/data_tutor_service?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=123456
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - my-network

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8082:8080"
    depends_on:
      - mysql
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/data_user_service?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=123456
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - my-network

  admin-moderator-service:
    build:
      context: ./admin-moderator-service
      dockerfile: Dockerfile
    container_name: admin-moderator-service
    ports:
      - "8001:8000"
    depends_on:
      - mysql
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=AdminDB
      - DB_USER=root
      - DB_PASSWORD=123456
    networks:
      - my-network

  rating-feedback-service:
    build:
      context: ./rating-feedback-service
      dockerfile: Dockerfile
    container_name: rating-feedback-service
    ports:
      - "8000:8000"
    depends_on:
      - mysql
    env_file:
      - ./rating-feedback-service/.env
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=rating_feedback_db
      - DB_USER=root
      - DB_PASSWORD=123456
    volumes:
      - ./rating-feedback-service:/app
    networks:
      - my-network

  booking-service:
    build:
      context: ./booking-service
      dockerfile: Dockerfile
    container_name: booking-service
    ports:
      - "8002:8002"
    networks:
      - my-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - my-network

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"    # Cổng cho các dịch vụ bên trong Docker
      - "29092:29092"  # Cổng cho kết nối từ host
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    networks:
      - my-network

volumes:
  mysql_data:

networks:
  my-network:
    driver: bridge


